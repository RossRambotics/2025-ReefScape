{"Device":[{"Name":"Motor Output","Summary":"Configs that directly affect motor output.","Description":"Includes motor invert, neutral mode, and other features related to motor output.","Ordinal":-15,"Configs":[{"Name":"Control Timesync Freq Hz","Summary":"When a control request UseTimesync is enabled, this determines the time-sychronized frequency at which control requests are applied.","Ordinal":0,"Type":"double","Description":null,"Units":"Hz","MinValue":50,"MaxValue":500,"SignalId":2419,"SignalName":"Config_ControlTimesyncFreq","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Duty Cycle Neutral Deadband","Summary":"Configures the output deadband duty cycle during duty cycle and voltage based control modes.","Ordinal":0,"Type":"double","Description":null,"Units":"fractional","MinValue":0,"MaxValue":0.25,"SignalId":2159,"SignalName":"Config_DutyCycleNeutralDB","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Inverted","Summary":"Invert state of the device as seen from the front of the motor.","Ordinal":0,"Type":"InvertedValue","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2155,"SignalName":"Config_Inverted","DefaultValue":0,"Value":0,"EnumValues":[{"Name":"CounterClockwise_Positive","Comment":"Positive motor output results in clockwise motion.","Value":0},{"Name":"Clockwise_Positive","Comment":"Positive motor output results in counter-clockwise motion.","Value":1}]},{"Name":"Neutral Mode","Summary":"The state of the motor controller bridge when output is neutral or disabled.","Ordinal":0,"Type":"NeutralModeValue","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2158,"SignalName":"Config_NeutralMode","DefaultValue":0,"Value":1,"EnumValues":[{"Name":"Coast","Comment":"","Value":0},{"Name":"Brake","Comment":"","Value":1}]},{"Name":"Peak Forward Duty Cycle","Summary":"Maximum (forward) output during duty cycle based control modes.","Ordinal":0,"Type":"double","Description":null,"Units":"fractional","MinValue":-1,"MaxValue":1,"SignalId":2164,"SignalName":"Config_PeakForwardDC","DefaultValue":1,"Value":1,"EnumValues":[]},{"Name":"Peak Reverse Duty Cycle","Summary":"Minimum (reverse) output during duty cycle based control modes.","Ordinal":0,"Type":"double","Description":null,"Units":"fractional","MinValue":-1,"MaxValue":1,"SignalId":2165,"SignalName":"Config_PeakReverseDC","DefaultValue":-1,"Value":-1,"EnumValues":[]}]},{"Name":"Current Limits","Summary":"Configs that directly affect current limiting features.","Description":"Contains the supply/stator current limit thresholds and whether to enable them.","Ordinal":-14,"Configs":[{"Name":"Stator Current Limit","Summary":"The amount of current allowed in the motor (motoring and regen current).  Note this requires StatorCurrentLimitEnable to be true.\nFor torque current control, this is applied in addition to the PeakForwardTorqueCurrent and PeakReverseTorqueCurrent in TorqueCurrentConfigs.\nStator current is directly proportional to torque, so this limit can be used to restrict the torque output of the motor, such as preventing wheel slip for a drivetrain.  Additionally, stator current limits can prevent brownouts during acceleration; supply current will never exceed the stator current limit and is often significantly lower than stator current.\nA reasonable starting point for a stator current limit is 120 A, with values commonly ranging from 80-160 A. Mechanisms with a hard stop may need a smaller limit to reduce the torque applied when running into the hard stop.","Ordinal":0,"Type":"double","Description":null,"Units":"A","MinValue":0,"MaxValue":800,"SignalId":2160,"SignalName":"Config_StatorCurrentLimit","DefaultValue":120,"Value":80,"EnumValues":[]},{"Name":"Stator Current Limit Enable","Summary":"Enable motor stator current limiting.","Ordinal":0,"Type":"Boolean","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2161,"SignalName":"Config_StatorCurrLimitEn","DefaultValue":1,"Value":1,"EnumValues":[]},{"Name":"Supply Current Limit","Summary":"The absolute maximum amount of supply current allowed.  Note this requires SupplyCurrentLimitEnable to be true.  Use SupplyCurrentLowerLimit and SupplyCurrentLowerTime to reduce the supply current limit after the time threshold is exceeded.\nSupply current is the current drawn from the battery, so this limit can be used to prevent breaker trips and improve battery longevity.  Additionally, in scenarios where the robot experiences brownouts despite configuring stator current limits, a supply current limit can further help avoid brownouts. However, it is important to note that such brownouts may be caused by a bad battery or poor power wiring.\nA reasonable starting point for a supply current limit is 70 A with a lower limit of 40 A after 1.0 second. Supply current limits commonly range from 20-80 A depending on the breaker used.","Ordinal":0,"Type":"double","Description":null,"Units":"A","MinValue":0,"MaxValue":800,"SignalId":2162,"SignalName":"Config_SupplyCurrentLimit","DefaultValue":70,"Value":70,"EnumValues":[]},{"Name":"Supply Current Limit Enable","Summary":"Enable motor supply current limiting.","Ordinal":0,"Type":"Boolean","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2163,"SignalName":"Config_SupplyCurrLimitEn","DefaultValue":1,"Value":1,"EnumValues":[]},{"Name":"Supply Current Lower Limit","Summary":"The amount of supply current allowed after the regular SupplyCurrentLimit is active for longer than SupplyCurrentLowerTime.  This allows higher current draws for a fixed period of time before reducing the current limit to protect breakers.  This has no effect if SupplyCurrentLimit is lower than this value or SupplyCurrentLowerTime is 0.","Ordinal":0,"Type":"double","Description":null,"Units":"A","MinValue":0,"MaxValue":500,"SignalId":2245,"SignalName":"Config_SupplyCurrentLowerLimit","DefaultValue":40,"Value":40,"EnumValues":[]},{"Name":"Supply Current Lower Time","Summary":"Reduces supply current to the SupplyCurrentLowerLimit after limiting to SupplyCurrentLimit for this period of time.  If this is set to 0, SupplyCurrentLowerLimit will be ignored.","Ordinal":0,"Type":"double","Description":null,"Units":"seconds","MinValue":0,"MaxValue":2.5,"SignalId":2246,"SignalName":"Config_SupplyCurrentLowerTime","DefaultValue":1,"Value":1,"EnumValues":[]}]},{"Name":"Closed Loop General","Summary":"Configs that affect general behavior during closed-looping.","Description":"Includes Continuous Wrap features.","Ordinal":-13,"Configs":[{"Name":"Continuous Wrap","Summary":"Wrap position error within [-0.5,\u002B0.5) mechanism rotations.  Typically used for continuous position closed-loops like swerve azimuth.","Ordinal":0,"Type":"Boolean","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2239,"SignalName":"Config_ContinuousWrap","DefaultValue":0,"Value":0,"EnumValues":[]}]},{"Name":"Slot0","Summary":"Gains for the specified slot.","Description":"If this slot is selected, these gains are used in closed loop control requests.","Ordinal":-13,"Configs":[{"Name":"kP","Summary":"Proportional Gain.","Ordinal":0,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2131,"SignalName":"Slot0_kP","DefaultValue":0,"Value":0.10999999940395355,"EnumValues":[]},{"Name":"kI","Summary":"Integral Gain.","Ordinal":1,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2132,"SignalName":"Slot0_kI","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kD","Summary":"Derivative Gain.","Ordinal":2,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2133,"SignalName":"Slot0_kD","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kS","Summary":"Static Feedforward Gain.","Ordinal":3,"Type":"double","Description":null,"Units":"","MinValue":-512,"MaxValue":511,"SignalId":2134,"SignalName":"Slot0_kS","DefaultValue":0,"Value":0.099609375,"EnumValues":[]},{"Name":"kV","Summary":"Velocity Feedforward Gain.","Ordinal":4,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2135,"SignalName":"Slot0_kV","DefaultValue":0,"Value":0.11999999731779099,"EnumValues":[]},{"Name":"kA","Summary":"Acceleration Feedforward Gain.","Ordinal":5,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2136,"SignalName":"Slot0_kA","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kG","Summary":"Gravity Feedforward/Feedback Gain.","Ordinal":6,"Type":"double","Description":null,"Units":"","MinValue":-512,"MaxValue":511,"SignalId":2137,"SignalName":"Slot0_kG","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Gravity Type","Summary":"Gravity Feedforward/Feedback Type.\nThis determines the type of the gravity feedforward/feedback.\nChoose Elevator_Static for systems where the gravity feedforward is constant, such as an elevator. The gravity feedforward output will always have the same sign.\nChoose Arm_Cosine for systems where the gravity feedback is dependent on the angular position of the mechanism, such as an arm. The gravity feedback output will vary depending on the mechanism angular position. Note that the sensor offset and ratios must be configured so that the sensor reports a position of 0 when the mechanism is horizonal (parallel to the ground), and the reported sensor position is 1:1 with the mechanism.","Ordinal":7,"Type":"GravityTypeValue","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2138,"SignalName":"Slot0_kG_Type","DefaultValue":0,"Value":0,"EnumValues":[{"Name":"Elevator_Static","Comment":"The system\u0027s gravity feedforward is constant, such as an elevator. The gravity feedforward output will always have the same sign.","Value":0},{"Name":"Arm_Cosine","Comment":"The system\u0027s gravity feedback is dependent on the angular position of the mechanism, such as an arm. The gravity feedback output will vary depending on the mechanism angular position. Note that the sensor offset and ratios must be configured so that the sensor reports a position of 0 when the mechanism is horizonal (parallel to the ground), and the reported sensor position is 1:1 with the mechanism.","Value":1}]},{"Name":"Static Feedforward Sign","Summary":"Static Feedforward Sign during position closed loop.\nThis determines the sign of the applied kS during position closed-loop modes. The default behavior uses the velocity reference sign. This works well with velocity closed loop, Motion Magic\u00AE controls, and position closed loop when velocity reference is specified (motion profiling).\nHowever, when using position closed loop with zero velocity reference (no motion profiling), the application may want to apply static feedforward based on the sign of closed loop error instead. When doing so, we recommend using the minimal amount of kS, otherwise the motor output may dither when closed loop error is near zero.","Ordinal":8,"Type":"StaticFeedforwardSignValue","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2366,"SignalName":"Slot0_kS_Sign","DefaultValue":0,"Value":0,"EnumValues":[{"Name":"UseVelocitySign","Comment":"Use the velocity reference sign. This works well with velocity closed loop, Motion Magic\u00AE controls, and position closed loop when velocity reference is specified (motion profiling).","Value":0},{"Name":"UseClosedLoopSign","Comment":"Use the sign of closed loop error. This is useful when using position closed loop with zero velocity reference (no motion profiling). We recommend the minimal amount of kS, otherwise the motor output may dither when closed loop error is near zero.","Value":1}]}]},{"Name":"Slot1","Summary":"Gains for the specified slot.","Description":"If this slot is selected, these gains are used in closed loop control requests.","Ordinal":-13,"Configs":[{"Name":"kP","Summary":"Proportional Gain.","Ordinal":0,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2139,"SignalName":"Slot1_kP","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kI","Summary":"Integral Gain.","Ordinal":1,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2140,"SignalName":"Slot1_kI","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kD","Summary":"Derivative Gain.","Ordinal":2,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2141,"SignalName":"Slot1_kD","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kS","Summary":"Static Feedforward Gain.","Ordinal":3,"Type":"double","Description":null,"Units":"","MinValue":-512,"MaxValue":511,"SignalId":2142,"SignalName":"Slot1_kS","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kV","Summary":"Velocity Feedforward Gain.","Ordinal":4,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2143,"SignalName":"Slot1_kV","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kA","Summary":"Acceleration Feedforward Gain.","Ordinal":5,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2144,"SignalName":"Slot1_kA","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kG","Summary":"Gravity Feedforward/Feedback Gain.","Ordinal":6,"Type":"double","Description":null,"Units":"","MinValue":-512,"MaxValue":511,"SignalId":2145,"SignalName":"Slot1_kG","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Gravity Type","Summary":"Gravity Feedforward/Feedback Type.\nThis determines the type of the gravity feedforward/feedback.\nChoose Elevator_Static for systems where the gravity feedforward is constant, such as an elevator. The gravity feedforward output will always be positive.\nChoose Arm_Cosine for systems where the gravity feedback is dependent on the angular position of the mechanism, such as an arm. The gravity feedback output will vary depending on the mechanism angular position. Note that the sensor offset and ratios must be configured so that the sensor position is 0 when the mechanism is horizonal, and one rotation of the mechanism corresponds to one rotation of the sensor position.","Ordinal":7,"Type":"GravityTypeValue","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2146,"SignalName":"Slot1_kG_Type","DefaultValue":0,"Value":0,"EnumValues":[{"Name":"Elevator_Static","Comment":"The system\u0027s gravity feedforward is constant, such as an elevator. The gravity feedforward output will always have the same sign.","Value":0},{"Name":"Arm_Cosine","Comment":"The system\u0027s gravity feedback is dependent on the angular position of the mechanism, such as an arm. The gravity feedback output will vary depending on the mechanism angular position. Note that the sensor offset and ratios must be configured so that the sensor reports a position of 0 when the mechanism is horizonal (parallel to the ground), and the reported sensor position is 1:1 with the mechanism.","Value":1}]},{"Name":"Static Feedforward Sign","Summary":"Static Feedforward Sign during position closed loop.\nThis determines the sign of the applied kS during position closed-loop modes. The default behavior uses the velocity reference sign. This works well with velocity closed loop, Motion Magic\u00AE controls, and position closed loop when velocity reference is specified (motion profiling).\nHowever, when using position closed loop with zero velocity reference (no motion profiling), the application may want to apply static feedforward based on the closed loop error sign instead. When doing so, we recommend using the minimal amount of kS, otherwise the motor output may dither when closed loop error is near zero.","Ordinal":8,"Type":"StaticFeedforwardSignValue","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2367,"SignalName":"Slot1_kS_Sign","DefaultValue":0,"Value":0,"EnumValues":[{"Name":"UseVelocitySign","Comment":"Use the velocity reference sign. This works well with velocity closed loop, Motion Magic\u00AE controls, and position closed loop when velocity reference is specified (motion profiling).","Value":0},{"Name":"UseClosedLoopSign","Comment":"Use the sign of closed loop error. This is useful when using position closed loop with zero velocity reference (no motion profiling). We recommend the minimal amount of kS, otherwise the motor output may dither when closed loop error is near zero.","Value":1}]}]},{"Name":"Slot2","Summary":"Gains for the specified slot.","Description":"If this slot is selected, these gains are used in closed loop control requests.","Ordinal":-13,"Configs":[{"Name":"kP","Summary":"Proportional Gain.","Ordinal":0,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2147,"SignalName":"Slot2_kP","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kI","Summary":"Integral Gain.","Ordinal":1,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2148,"SignalName":"Slot2_kI","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kD","Summary":"Derivative Gain.","Ordinal":2,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2149,"SignalName":"Slot2_kD","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kS","Summary":"Static Feedforward Gain.","Ordinal":3,"Type":"double","Description":null,"Units":"","MinValue":-512,"MaxValue":511,"SignalId":2150,"SignalName":"Slot2_kS","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kV","Summary":"Velocity Feedforward Gain.","Ordinal":4,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2151,"SignalName":"Slot2_kV","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kA","Summary":"Acceleration Feedforward Gain.","Ordinal":5,"Type":"double","Description":null,"Units":"","MinValue":0,"MaxValue":3.4E+38,"SignalId":2152,"SignalName":"Slot2_kA","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"kG","Summary":"Gravity Feedforward/Feedback Gain.","Ordinal":6,"Type":"double","Description":null,"Units":"","MinValue":-512,"MaxValue":511,"SignalId":2153,"SignalName":"Slot2_kG","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Gravity Type","Summary":"Gravity Feedforward/Feedback Type.\nThis determines the type of the gravity feedforward/feedback.\nChoose Elevator_Static for systems where the gravity feedforward is constant, such as an elevator. The gravity feedforward output will always be positive.\nChoose Arm_Cosine for systems where the gravity feedback is dependent on the angular position of the mechanism, such as an arm. The gravity feedback output will vary depending on the mechanism angular position. Note that the sensor offset and ratios must be configured so that the sensor position is 0 when the mechanism is horizonal, and one rotation of the mechanism corresponds to one rotation of the sensor position.","Ordinal":7,"Type":"GravityTypeValue","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2154,"SignalName":"Slot2_kG_Type","DefaultValue":0,"Value":0,"EnumValues":[{"Name":"Elevator_Static","Comment":"The system\u0027s gravity feedforward is constant, such as an elevator. The gravity feedforward output will always have the same sign.","Value":0},{"Name":"Arm_Cosine","Comment":"The system\u0027s gravity feedback is dependent on the angular position of the mechanism, such as an arm. The gravity feedback output will vary depending on the mechanism angular position. Note that the sensor offset and ratios must be configured so that the sensor reports a position of 0 when the mechanism is horizonal (parallel to the ground), and the reported sensor position is 1:1 with the mechanism.","Value":1}]},{"Name":"Static Feedforward Sign","Summary":"Static Feedforward Sign during position closed loop.\nThis determines the sign of the applied kS during position closed-loop modes. The default behavior uses the velocity reference sign. This works well with velocity closed loop, Motion Magic\u00AE controls, and position closed loop when velocity reference is specified (motion profiling).\nHowever, when using position closed loop with zero velocity reference (no motion profiling), the application may want to apply static feedforward based on the closed loop error sign instead. When doing so, we recommend using the minimal amount of kS, otherwise the motor output may dither when closed loop error is near zero.","Ordinal":8,"Type":"StaticFeedforwardSignValue","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2368,"SignalName":"Slot2_kS_Sign","DefaultValue":0,"Value":0,"EnumValues":[{"Name":"UseVelocitySign","Comment":"Use the velocity reference sign. This works well with velocity closed loop, Motion Magic\u00AE controls, and position closed loop when velocity reference is specified (motion profiling).","Value":0},{"Name":"UseClosedLoopSign","Comment":"Use the sign of closed loop error. This is useful when using position closed loop with zero velocity reference (no motion profiling). We recommend the minimal amount of kS, otherwise the motor output may dither when closed loop error is near zero.","Value":1}]}]},{"Name":"Voltage","Summary":"Configs that affect Voltage control types.","Description":"Includes peak output voltages and other configs affecting voltage measurements.","Ordinal":-12,"Configs":[{"Name":"Peak Forward Voltage","Summary":"Maximum (forward) output during voltage based control modes.","Ordinal":0,"Type":"double","Description":null,"Units":"V","MinValue":-16,"MaxValue":16,"SignalId":2166,"SignalName":"Config_PeakForwardV","DefaultValue":16,"Value":10,"EnumValues":[]},{"Name":"Peak Reverse Voltage","Summary":"Minimum (reverse) output during voltage based control modes.","Ordinal":0,"Type":"double","Description":null,"Units":"V","MinValue":-16,"MaxValue":16,"SignalId":2167,"SignalName":"Config_PeakReverseV","DefaultValue":-16,"Value":-10,"EnumValues":[]},{"Name":"Supply Voltage Time Constant","Summary":"The time constant (in seconds) of the low-pass filter for the supply voltage.","Ordinal":0,"Type":"double","Description":null,"Units":"seconds","MinValue":0,"MaxValue":0.1,"SignalId":2156,"SignalName":"Config_SupplyVLowpassTau","DefaultValue":0,"Value":0,"EnumValues":[]}]},{"Name":"Feedback","Summary":"Configs that affect the feedback of this motor controller.","Description":"Includes feedback sensor source, any offsets for the feedback sensor, and various ratios to describe the relationship between the sensor and the mechanism for closed looping.","Ordinal":-10,"Configs":[{"Name":"Feedback Remote SensorID","Summary":"Device ID of which remote device to use.  This is not used if the Sensor Source is the internal rotor sensor.","Ordinal":0,"Type":"Integer","Description":null,"Units":"","MinValue":0,"MaxValue":62,"SignalId":2175,"SignalName":"Config_FeedbackRemoteSensorID","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Feedback Rotor Offset","Summary":"The offset applied to the absolute integrated rotor sensor.  This can be used to zero the rotor in applications that are within one rotor rotation.","Ordinal":0,"Type":"double","Description":null,"Units":"rotations","MinValue":-1,"MaxValue":1,"SignalId":2171,"SignalName":"Config_FeedbackRotorOffset","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Feedback Sensor Source","Summary":"Choose what sensor source is reported via API and used by closed-loop and limit features.  The default is RotorSensor, which uses the internal rotor sensor in the Talon.\nChoose Remote* to use another sensor on the same CAN bus (this also requires setting FeedbackRemoteSensorID).  Talon will update its position and velocity whenever the remote sensor publishes its information on CAN bus, and the Talon internal rotor will not be used.\nChoose Fused* (requires Phoenix Pro) and Talon will fuse another sensor\u0027s information with the internal rotor, which provides the best possible position and velocity for accuracy and bandwidth (this also requires setting FeedbackRemoteSensorID).  This was developed for applications such as swerve-azimuth.\nChoose Sync* (requires Phoenix Pro) and Talon will synchronize its internal rotor position against another sensor, then continue to use the rotor sensor for closed loop control (this also requires setting FeedbackRemoteSensorID).  The Talon will report if its internal position differs significantly from the reported remote sensor position.  This was developed for mechanisms where there is a risk of the sensor failing in such a way that it reports a position that does not match the mechanism, such as the sensor mounting assembly breaking off.\nChoose RemotePigeon2_Yaw, RemotePigeon2_Pitch, and RemotePigeon2_Roll to use another Pigeon2 on the same CAN bus (this also requires setting FeedbackRemoteSensorID).  Talon will update its position to match the selected value whenever Pigeon2 publishes its information on CAN bus. Note that the Talon position will be in rotations and not degrees.","Ordinal":0,"Type":"FeedbackSensorSourceValue","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2174,"SignalName":"Config_FeedbackSensorSource","DefaultValue":0,"Value":0,"EnumValues":[{"Name":"RotorSensor","Comment":"Use the internal rotor sensor in the Talon.","Value":0},{"Name":"RemoteCANcoder","Comment":"Use another CANcoder on the same CAN bus (this also requires setting FeedbackRemoteSensorID).  Talon will update its position and velocity whenever CANcoder publishes its information on CAN bus, and the Talon internal rotor will not be used.","Value":1},{"Name":"RemotePigeon2_Yaw","Comment":"Use another Pigeon2 on the same CAN bus (this also requires setting FeedbackRemoteSensorID).  Talon will update its position to match the Pigeon2 yaw whenever Pigeon2 publishes its information on CAN bus. Note that the Talon position will be in rotations and not degrees.","Value":2},{"Name":"RemotePigeon2_Pitch","Comment":"Use another Pigeon2 on the same CAN bus (this also requires setting FeedbackRemoteSensorID).  Talon will update its position to match the Pigeon2 pitch whenever Pigeon2 publishes its information on CAN bus. Note that the Talon position will be in rotations and not degrees.","Value":3},{"Name":"RemotePigeon2_Roll","Comment":"Use another Pigeon2 on the same CAN bus (this also requires setting FeedbackRemoteSensorID).  Talon will update its position to match the Pigeon2 roll whenever Pigeon2 publishes its information on CAN bus. Note that the Talon position will be in rotations and not degrees.","Value":4},{"Name":"FusedCANcoder","Comment":"Requires Phoenix Pro; Talon will fuse another CANcoder\u0027s information with the internal rotor, which provides the best possible position and velocity for accuracy and bandwidth (this also requires setting FeedbackRemoteSensorID).  FusedCANcoder was developed for applications such as swerve-azimuth.","Value":5},{"Name":"SyncCANcoder","Comment":"Requires Phoenix Pro; Talon will synchronize its internal rotor position against another CANcoder, then continue to use the rotor sensor for closed loop control (this also requires setting FeedbackRemoteSensorID).  The Talon will report if its internal position differs significantly from the reported CANcoder position.  SyncCANcoder was developed for mechanisms where there is a risk of the CANcoder failing in such a way that it reports a position that does not match the mechanism, such as the sensor mounting assembly breaking off.","Value":6},{"Name":"RemoteCANdiPWM1","Comment":"Use a pulse-width encoder remotely attached to the Sensor Input 1 (S1IN) on CANdi. Talon will update its position and velocity whenever CANdi publishes its information on CAN bus, and the Talon internal rotor will not be used.","Value":9},{"Name":"RemoteCANdiPWM2","Comment":"Use a pulse-width encoder remotely attached to the Sensor Input 2 (S2IN) on CANdi. Talon will update its position and velocity whenever CANdi publishes its information on CAN bus, and the Talon internal rotor will not be used.","Value":10},{"Name":"RemoteCANdiQuadrature","Comment":"Use a quadrature encoder remotely attached to the two Sensor Inputs on CANdi. Talon will update its position and velocity whenever CANdi publishes its information on CAN bus, and the Talon internal rotor will not be used.","Value":11},{"Name":"FusedCANdiPWM1","Comment":"Requires Phoenix Pro; Talon will fuse a pulse-width encoder remotely attached to the Sensor Input 1 (S1IN) on CANdi, which provides the best possible position and velocity for accuracy and bandwidth (this also requires setting FeedbackRemoteSensorID).  FusedCANdi was developed for applications such as swerve-azimuth.","Value":12},{"Name":"FusedCANdiPWM2","Comment":"Requires Phoenix Pro; Talon will fuse a pulse-width encoder remotely attached to the Sensor Input 2 (S2IN) on CANdi, which provides the best possible position and velocity for accuracy and bandwidth (this also requires setting FeedbackRemoteSensorID).  FusedCANdi was developed for applications such as swerve-azimuth.","Value":13},{"Name":"FusedCANdiQuadrature","Comment":"Requires Phoenix Pro; Talon will fuse a qaudrature encoder remotely attached to the two Sensor Inputs on CANdi. This provides velocity and relative position measurements. This also requires setting FeedbackRemoteSensorID.","Value":14},{"Name":"SyncCANdiPWM1","Comment":"Requires Phoenix Pro; Talon will synchronize its internal rotor position against the pulse-width encoder attached to Sensor Input 1 (S1IN), then continue to use the rotor sensor for closed loop control (this also requires setting FeedbackRemoteSensorID).  The Talon will report if its internal position differs significantly from the reported PWM position.  SyncCANdi was developed for mechanisms where there is a risk of the CANdi failing in such a way that it reports a position that does not match the mechanism, such as the sensor mounting assembly breaking off.","Value":15},{"Name":"SyncCANdiPWM2","Comment":"Requires Phoenix Pro; Talon will synchronize its internal rotor position against the pulse-width encoder attached to Sensor Input 1 (S1IN), then continue to use the rotor sensor for closed loop control (this also requires setting FeedbackRemoteSensorID).  The Talon will report if its internal position differs significantly from the reported PWM position.  SyncCANdi was developed for mechanisms where there is a risk of the CANdi failing in such a way that it reports a position that does not match the mechanism, such as the sensor mounting assembly breaking off.","Value":16}]},{"Name":"Rotor To Sensor Ratio","Summary":"The ratio of motor rotor rotations to remote sensor rotations, where a ratio greater than 1 is a reduction.\nThe Talon FX is capable of fusing a remote CANcoder with its rotor sensor to produce a high-bandwidth sensor source.  This feature requires specifying the ratio between the motor rotor and the remote sensor.\nIf this is set to zero, the device will reset back to one.","Ordinal":0,"Type":"double","Description":null,"Units":"scalar","MinValue":-1000,"MaxValue":1000,"SignalId":2173,"SignalName":"Config_RotorToSensorRatio","DefaultValue":1,"Value":1,"EnumValues":[]},{"Name":"Sensor To Mechanism Ratio","Summary":"The ratio of sensor rotations to the mechanism\u0027s output, where a ratio greater than 1 is a reduction.\nThis is equivalent to the mechanism\u0027s gear ratio if the sensor is located on the input of a gearbox.  If sensor is on the output of a gearbox, then this is typically set to 1.\nWe recommend against using this config to perform onboard unit conversions.  Instead, unit conversions should be performed in robot code using the units library.\nIf this is set to zero, the device will reset back to one.","Ordinal":0,"Type":"double","Description":null,"Units":"scalar","MinValue":-1000,"MaxValue":1000,"SignalId":2172,"SignalName":"Config_SensorToMechanismRatio","DefaultValue":1,"Value":1,"EnumValues":[]},{"Name":"Velocity Filter Time Constant","Summary":"The configurable time constant of the Kalman velocity filter. The velocity Kalman filter will adjust to act as a low-pass with this value as its time constant.","Ordinal":0,"Type":"double","Description":null,"Units":"seconds","MinValue":0,"MaxValue":1,"SignalId":2420,"SignalName":"Config_VelocityFilterTimeConstant","DefaultValue":0,"Value":0,"EnumValues":[]}]},{"Name":"Differential Sensors","Summary":"Configs related to sensors used for differential control of a mechanism.","Description":"Includes the differential sensor sources and IDs.","Ordinal":-9,"Configs":[{"Name":"Differential Remote SensorID","Summary":"Device ID of which remote sensor to use on the differential axis.  This is used when the Differential Sensor Source is not RemoteTalonFX_Diff.","Ordinal":0,"Type":"Integer","Description":null,"Units":"","MinValue":0,"MaxValue":62,"SignalId":2262,"SignalName":"Config_DifferentialRemoteSensorID","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Differential Sensor Source","Summary":"Choose what sensor source is used for differential control of a mechanism.  The default is Disabled.  All other options require setting the DifferentialTalonFXSensorID, as the average of this Talon FX\u0027s sensor and the remote TalonFX\u0027s sensor is used for the differential controller\u0027s primary targets.\nChoose RemoteTalonFX_Diff to use another TalonFX on the same CAN bus.  Talon FX will update its differential position and velocity whenever the remote TalonFX publishes its information on CAN bus.  The differential controller will use the difference between this TalonFX\u0027s sensor and the remote Talon FX\u0027s sensor for the differential component of the output.\nChoose RemotePigeon2_Yaw, RemotePigeon2_Pitch, and RemotePigeon2_Roll to use another Pigeon2 on the same CAN bus (this also requires setting DifferentialRemoteSensorID).  Talon FX will update its differential position to match the selected value whenever Pigeon2 publishes its information on CAN bus. Note that the Talon FX differential position will be in rotations and not degrees.\nChoose RemoteCANcoder to use another CANcoder on the same CAN bus (this also requires setting DifferentialRemoteSensorID).  Talon FX will update its differential position and velocity to match the CANcoder whenever CANcoder publishes its information on CAN bus.","Ordinal":0,"Type":"DifferentialSensorSourceValue","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2260,"SignalName":"Config_DifferentialSensorSource","DefaultValue":0,"Value":0,"EnumValues":[{"Name":"Disabled","Comment":"Disable differential control.","Value":0},{"Name":"RemoteTalonFX_Diff","Comment":"Use another TalonFX on the same CAN bus.  Talon FX will update its differential position and velocity whenever the remote TalonFX publishes its information on CAN bus.  The differential controller will use the difference between this TalonFX\u0027s sensor and the remote Talon FX\u0027s sensor for the differential component of the output.","Value":1},{"Name":"RemotePigeon2_Yaw","Comment":"Use another Pigeon2 on the same CAN bus (this also requires setting DifferentialRemoteSensorID).  Talon FX will update its differential position to match the Pigeon2 yaw whenever Pigeon2 publishes its information on CAN bus. Note that the Talon FX differential position will be in rotations and not degrees.","Value":2},{"Name":"RemotePigeon2_Pitch","Comment":"Use another Pigeon2 on the same CAN bus (this also requires setting DifferentialRemoteSensorID).  Talon FX will update its differential position to match the Pigeon2 pitch whenever Pigeon2 publishes its information on CAN bus. Note that the Talon FX differential position will be in rotations and not degrees.","Value":3},{"Name":"RemotePigeon2_Roll","Comment":"Use another Pigeon2 on the same CAN bus (this also requires setting DifferentialRemoteSensorID).  Talon FX will update its differential position to match the Pigeon2 roll whenever Pigeon2 publishes its information on CAN bus. Note that the Talon FX differential position will be in rotations and not degrees.","Value":4},{"Name":"RemoteCANcoder","Comment":"Use another CANcoder on the same CAN bus (this also requires setting DifferentialRemoteSensorID).  Talon FX will update its differential position and velocity to match the CANcoder whenever CANcoder publishes its information on CAN bus.","Value":5}]},{"Name":"Differential TalonFX SensorID","Summary":"Device ID of which remote Talon FX to use.  This is used when the Differential Sensor Source is not disabled.","Ordinal":0,"Type":"Integer","Description":null,"Units":"","MinValue":0,"MaxValue":62,"SignalId":2261,"SignalName":"Config_DifferentialTalonFXSensorID","DefaultValue":0,"Value":0,"EnumValues":[]}]},{"Name":"Differential Constants","Summary":"Configs related to constants used for differential control of a mechanism.","Description":"Includes the differential peak outputs.","Ordinal":-8,"Configs":[{"Name":"Peak Differential Duty Cycle","Summary":"Maximum differential output during duty cycle based differential control modes.","Ordinal":0,"Type":"double","Description":null,"Units":"fractional","MinValue":0,"MaxValue":2,"SignalId":2203,"SignalName":"Config_PeakDiffDC","DefaultValue":2,"Value":2,"EnumValues":[]},{"Name":"Peak Differential Torque Current","Summary":"Maximum differential output during torque current based differential control modes.","Ordinal":0,"Type":"double","Description":null,"Units":"A","MinValue":0,"MaxValue":1600,"SignalId":2205,"SignalName":"Config_PeakDiffTorqCurr","DefaultValue":1600,"Value":1600,"EnumValues":[]},{"Name":"Peak Differential Voltage","Summary":"Maximum differential output during voltage based differential control modes.","Ordinal":0,"Type":"double","Description":null,"Units":"V","MinValue":0,"MaxValue":32,"SignalId":2204,"SignalName":"Config_PeakDiffV","DefaultValue":32,"Value":32,"EnumValues":[]}]},{"Name":"Open Loop Ramps","Summary":"Configs that affect the open-loop control of this motor controller.","Description":"Open-loop ramp rates for the various control types.","Ordinal":-7,"Configs":[{"Name":"Duty Cycle Open Loop Ramp Period","Summary":"If non-zero, this determines how much time to ramp from 0% output to 100% during the open-loop DutyCycleOut control mode.\nThis provides an easy way to limit the acceleration of the motor. However, the acceleration and current draw of the motor can be better restricted using current limits instead of a ramp rate.","Ordinal":-2,"Type":"double","Description":null,"Units":"seconds","MinValue":0,"MaxValue":1,"SignalId":2176,"SignalName":"Config_DutyCycleOpenLoopRampPeriod","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Voltage Open Loop Ramp Period","Summary":"If non-zero, this determines how much time to ramp from 0V output to 12V during the open-loop VoltageOut control mode.\nThis provides an easy way to limit the acceleration of the motor. However, the acceleration and current draw of the motor can be better restricted using current limits instead of a ramp rate.","Ordinal":-1,"Type":"double","Description":null,"Units":"seconds","MinValue":0,"MaxValue":1,"SignalId":2177,"SignalName":"Config_VoltageOpenLoopRampPeriod","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Torque Open Loop Ramp Period","Summary":"If non-zero, this determines how much time to ramp from 0A output to 300A during the open-loop TorqueCurrent control mode.\nSince TorqueCurrent is directly proportional to acceleration, this ramp limits jerk instead of acceleration.","Ordinal":0,"Type":"double","Description":null,"Units":"seconds","MinValue":0,"MaxValue":10,"SignalId":2178,"SignalName":"Config_TorqueOpenLoopRampPeriod","DefaultValue":0,"Value":0,"EnumValues":[]}]},{"Name":"Closed Loop Ramps","Summary":"Configs that affect the closed-loop control of this motor controller.","Description":"Closed-loop ramp rates for the various control types.","Ordinal":-6,"Configs":[{"Name":"Duty Cycle Closed Loop Ramp Period","Summary":"If non-zero, this determines how much time to ramp from 0% output to 100% during the closed-loop DutyCycle control modes.\nIf the goal is to limit acceleration, it is more useful to ramp the closed-loop setpoint instead of the output. This can be achieved using Motion Magic\u00AE controls.\nThe acceleration and current draw of the motor can also be better restricted using current limits instead of a ramp rate.","Ordinal":-2,"Type":"double","Description":null,"Units":"seconds","MinValue":0,"MaxValue":1,"SignalId":2179,"SignalName":"Config_DutyCycleClosedLoopRampPeriod","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Voltage Closed Loop Ramp Period","Summary":"If non-zero, this determines how much time to ramp from 0V output to 12V during the closed-loop Voltage control modes.\nIf the goal is to limit acceleration, it is more useful to ramp the closed-loop setpoint instead of the output. This can be achieved using Motion Magic\u00AE controls.\nThe acceleration and current draw of the motor can also be better restricted using current limits instead of a ramp rate.","Ordinal":-1,"Type":"double","Description":null,"Units":"seconds","MinValue":0,"MaxValue":1,"SignalId":2180,"SignalName":"Config_VoltageClosedLoopRampPeriod","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Torque Closed Loop Ramp Period","Summary":"If non-zero, this determines how much time to ramp from 0A output to 300A during the closed-loop TorqueCurrent control modes.\nSince TorqueCurrent is directly proportional to acceleration, this ramp limits jerk instead of acceleration.\nIf the goal is to limit acceleration or jerk, it is more useful to ramp the closed-loop setpoint instead of the output. This can be achieved using Motion Magic\u00AE controls.\nThe acceleration and current draw of the motor can also be better restricted using current limits instead of a ramp rate.","Ordinal":0,"Type":"double","Description":null,"Units":"seconds","MinValue":0,"MaxValue":10,"SignalId":2181,"SignalName":"Config_TorqueClosedLoopRampPeriod","DefaultValue":0,"Value":0,"EnumValues":[]}]},{"Name":"Hardware Limit Switch","Summary":"Configs that change how the motor controller behaves under different limit switch states.","Description":"Includes configs such as enabling limit switches, configuring the remote sensor ID, the source, and the position to set on limit.","Ordinal":-4,"Configs":[{"Name":"Forward Limit Enable","Summary":"If enabled, motor output is set to neutral when the forward limit switch is asserted and positive output is requested.","Ordinal":-2,"Type":"Boolean","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2185,"SignalName":"Config_ForwardLimitEnable","DefaultValue":1,"Value":1,"EnumValues":[]},{"Name":"Forward Limit Autoset Position Enable","Summary":"If enabled, the position is automatically set to a specific value, specified by ForwardLimitAutosetPositionValue, when the forward limit switch is asserted.","Ordinal":-1,"Type":"Boolean","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2183,"SignalName":"Config_ForwardLimitAutosetPosEnable","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Forward Limit Autoset Position Value","Summary":"The value to automatically set the position to when the forward limit switch is asserted.  This has no effect if ForwardLimitAutosetPositionEnable is false.","Ordinal":0,"Type":"double","Description":null,"Units":"rotations","MinValue":-3.4E+38,"MaxValue":3.4E+38,"SignalId":2184,"SignalName":"Config_ForwardLimitAutosetPosValue","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Forward Limit Remote SensorID","Summary":"Device ID of the remote device if using remote limit switch features for the forward limit switch.","Ordinal":0,"Type":"Integer","Description":null,"Units":"","MinValue":0,"MaxValue":62,"SignalId":2187,"SignalName":"Config_ForwardLimitRemoteSensorID","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Forward Limit Source","Summary":"Determines where to poll the forward limit switch.  This defaults to the forward limit switch pin on the limit switch connector.\nChoose RemoteTalonFX to use the forward limit switch attached to another Talon FX on the same CAN bus (this also requires setting ForwardLimitRemoteSensorID).\nChoose RemoteCANifier to use the forward limit switch attached to another CANifier on the same CAN bus (this also requires setting ForwardLimitRemoteSensorID).\nChoose RemoteCANcoder to use another CANcoder on the same CAN bus (this also requires setting ForwardLimitRemoteSensorID).  The forward limit will assert when the CANcoder magnet strength changes from BAD (red) to ADEQUATE (orange) or GOOD (green).","Ordinal":0,"Type":"ForwardLimitSourceValue","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2186,"SignalName":"Config_ForwardLimitSource","DefaultValue":0,"Value":0,"EnumValues":[{"Name":"LimitSwitchPin","Comment":"Use the forward limit switch pin on the limit switch connector.","Value":0},{"Name":"RemoteTalonFX","Comment":"Use the forward limit switch attached to another Talon FX on the same CAN bus (this also requires setting ForwardLimitRemoteSensorID).","Value":1},{"Name":"RemoteCANifier","Comment":"Use the forward limit switch attached to another CANifier on the same CAN bus (this also requires setting ForwardLimitRemoteSensorID).","Value":2},{"Name":"RemoteCANcoder","Comment":"Use another CANcoder on the same CAN bus (this also requires setting ForwardLimitRemoteSensorID).  The forward limit will assert when the CANcoder magnet strength changes from BAD (red) to ADEQUATE (orange) or GOOD (green).","Value":4},{"Name":"RemoteCANrange","Comment":"Use another CANrange on the same CAN bus (this also requires setting ForwardLimitRemoteSensorID).  The forward limit will assert when the CANrange proximity detect is tripped.","Value":6},{"Name":"RemoteCANdiS1","Comment":"Use another CANdi on the same CAN bus (this also requires setting ForwardLimitRemoteSensorID).  The forward limit will assert when the CANdi Signal 1 Input (S1IN) pin matches the configured closed state.","Value":7},{"Name":"RemoteCANdiS2","Comment":"Use another CANdi on the same CAN bus (this also requires setting ForwardLimitRemoteSensorID).  The forward limit will assert when the CANdi Signal 2 Input (S2IN) pin matches the configured closed state.","Value":8},{"Name":"Disabled","Comment":"Disable the forward limit switch.","Value":3}]},{"Name":"Forward Limit Type","Summary":"Determines if the forward limit switch is normally-open (default) or normally-closed.","Ordinal":0,"Type":"ForwardLimitTypeValue","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2182,"SignalName":"Config_ForwardLimitType","DefaultValue":0,"Value":0,"EnumValues":[{"Name":"NormallyOpen","Comment":"","Value":0},{"Name":"NormallyClosed","Comment":"","Value":1}]},{"Name":"Reverse Limit Autoset Position Enable","Summary":"If enabled, the position is automatically set to a specific value, specified by ReverseLimitAutosetPositionValue, when the reverse limit switch is asserted.","Ordinal":0,"Type":"Boolean","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2189,"SignalName":"Config_ReverseLimitAutosetPosEnable","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Reverse Limit Autoset Position Value","Summary":"The value to automatically set the position to when the reverse limit switch is asserted.  This has no effect if ReverseLimitAutosetPositionEnable is false.","Ordinal":0,"Type":"double","Description":null,"Units":"rotations","MinValue":-3.4E+38,"MaxValue":3.4E+38,"SignalId":2190,"SignalName":"Config_ReverseLimitAutosetPosValue","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Reverse Limit Enable","Summary":"If enabled, motor output is set to neutral when reverse limit switch is asseted and negative output is requested.","Ordinal":0,"Type":"Boolean","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2191,"SignalName":"Config_ReverseLimitEnable","DefaultValue":1,"Value":1,"EnumValues":[]},{"Name":"Reverse Limit Remote SensorID","Summary":"Device ID of the remote device if using remote limit switch features for the reverse limit switch.","Ordinal":0,"Type":"Integer","Description":null,"Units":"","MinValue":0,"MaxValue":62,"SignalId":2193,"SignalName":"Config_ReverseLimitRemoteSensorID","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Reverse Limit Source","Summary":"Determines where to poll the reverse limit switch.  This defaults to the reverse limit switch pin on the limit switch connector.\nChoose RemoteTalonFX to use the reverse limit switch attached to another Talon FX on the same CAN bus (this also requires setting ReverseLimitRemoteSensorID).\nChoose RemoteCANifier to use the reverse limit switch attached to another CANifier on the same CAN bus (this also requires setting ReverseLimitRemoteSensorID).\nChoose RemoteCANcoder to use another CANcoder on the same CAN bus (this also requires setting ReverseLimitRemoteSensorID).  The reverse limit will assert when the CANcoder magnet strength changes from BAD (red) to ADEQUATE (orange) or GOOD (green).","Ordinal":0,"Type":"ReverseLimitSourceValue","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2192,"SignalName":"Config_ReverseLimitSource","DefaultValue":0,"Value":0,"EnumValues":[{"Name":"LimitSwitchPin","Comment":"Use the reverse limit switch pin on the limit switch connector.","Value":0},{"Name":"RemoteTalonFX","Comment":"Use the reverse limit switch attached to another Talon FX on the same CAN bus (this also requires setting ReverseLimitRemoteSensorID).","Value":1},{"Name":"RemoteCANifier","Comment":"Use the reverse limit switch attached to another CANifier on the same CAN bus (this also requires setting ReverseLimitRemoteSensorID).","Value":2},{"Name":"RemoteCANcoder","Comment":"Use another CANcoder on the same CAN bus (this also requires setting ReverseLimitRemoteSensorID).  The reverse limit will assert when the CANcoder magnet strength changes from BAD (red) to ADEQUATE (orange) or GOOD (green).","Value":4},{"Name":"RemoteCANrange","Comment":"Use another CANrange on the same CAN bus (this also requires setting ReverseLimitRemoteSensorID).  The reverse limit will assert when the CANrange proximity detect is tripped.","Value":6},{"Name":"RemoteCANdiS1","Comment":"Use another CANdi on the same CAN bus (this also requires setting ForwardLimitRemoteSensorID).  The forward limit will assert when the CANdi Signal 1 Input (S1IN) pin matches the configured closed state.","Value":7},{"Name":"RemoteCANdiS2","Comment":"Use another CANdi on the same CAN bus (this also requires setting ForwardLimitRemoteSensorID).  The forward limit will assert when the CANdi Signal 2 Input (S2IN) pin matches the configured closed state.","Value":8},{"Name":"Disabled","Comment":"Disable the reverse limit switch.","Value":3}]},{"Name":"Reverse Limit Type","Summary":"Determines if the reverse limit switch is normally-open (default) or normally-closed.","Ordinal":0,"Type":"ReverseLimitTypeValue","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2188,"SignalName":"Config_ReverseLimitType","DefaultValue":0,"Value":0,"EnumValues":[{"Name":"NormallyOpen","Comment":"","Value":0},{"Name":"NormallyClosed","Comment":"","Value":1}]}]},{"Name":"Software Limit Switch","Summary":"Configs that affect how software-limit switches behave.","Description":"Includes enabling software-limit switches and the threshold at which they are tripped.","Ordinal":-3,"Configs":[{"Name":"Forward Soft Limit Enable","Summary":"If enabled, the motor output is set to neutral if position exceeds ForwardSoftLimitThreshold and forward output is requested.","Ordinal":0,"Type":"Boolean","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2194,"SignalName":"Config_ForwardSoftLimitEnable","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Forward Soft Limit Threshold","Summary":"Position threshold for forward soft limit features. ForwardSoftLimitEnable must be enabled for this to take effect.","Ordinal":0,"Type":"double","Description":null,"Units":"rotations","MinValue":-3.4E+38,"MaxValue":3.4E+38,"SignalId":2196,"SignalName":"Config_ForwardSoftLimitThreshold","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Reverse Soft Limit Enable","Summary":"If enabled, the motor output is set to neutral if position exceeds ReverseSoftLimitThreshold and reverse output is requested.","Ordinal":0,"Type":"Boolean","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2195,"SignalName":"Config_ReverseSoftLimitEnable","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Reverse Soft Limit Threshold","Summary":"Position threshold for reverse soft limit features. ReverseSoftLimitEnable must be enabled for this to take effect.","Ordinal":0,"Type":"double","Description":null,"Units":"rotations","MinValue":-3.4E+38,"MaxValue":3.4E+38,"SignalId":2197,"SignalName":"Config_ReverseSoftLimitThreshold","DefaultValue":0,"Value":0,"EnumValues":[]}]},{"Name":"Motion Magic","Summary":"Configs for Motion Magic\u00AE.","Description":"Includes Velocity, Acceleration, Jerk, and Expo parameters.","Ordinal":-2,"Configs":[{"Name":"Motion Magic Cruise Velocity","Summary":"This is the maximum velocity Motion Magic\u00AE based control modes are allowed to use.  Motion Magic\u00AE Velocity control modes do not use this config.\nWhen using Motion Magic\u00AE Expo control modes, setting this to 0 will allow the profile to run to the max possible velocity based on Expo_kV.","Ordinal":-5,"Type":"double","Description":null,"Units":"rot per sec","MinValue":0,"MaxValue":9999,"SignalId":2198,"SignalName":"Config_MotionMagicCruiseVelocity","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Motion Magic Acceleration","Summary":"This is the target acceleration Motion Magic\u00AE based control modes are allowed to use.  Motion Magic\u00AE Expo control modes do not use this config.","Ordinal":-4,"Type":"double","Description":null,"Units":"rot per sec\u00B2","MinValue":0,"MaxValue":9999,"SignalId":2199,"SignalName":"Config_MotionMagicAcceleration","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Motion Magic Jerk","Summary":"This is the target jerk (acceleration derivative) Motion Magic\u00AE based control modes are allowed to use.  Motion Magic\u00AE Expo control modes do not use this config.  This allows Motion Magic\u00AE to generate S-Curve profiles.\nJerk is optional; if this is set to zero, then Motion Magic\u00AE will not apply a Jerk limit.","Ordinal":-3,"Type":"double","Description":null,"Units":"rot per sec\u00B3","MinValue":0,"MaxValue":9999,"SignalId":2200,"SignalName":"Config_MotionMagicJerk","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Motion Magic Expo_kV","Summary":"This is the target kV used only by Motion Magic\u00AE Expo control modes. Unlike the kV slot gain, this is always in units of V/rps.\nThis represents the amount of voltage necessary to hold a velocity. In terms of the Motion Magic\u00AE Expo profile, a higher kV results in a slower maximum velocity.","Ordinal":-2,"Type":"double","Description":null,"Units":"V/rps","MinValue":0.001,"MaxValue":100,"SignalId":2201,"SignalName":"Config_MotionMagicExpo_kV","DefaultValue":0.12,"Value":0.11999999731779099,"EnumValues":[]},{"Name":"Motion Magic Expo_kA","Summary":"This is the target kA used only by Motion Magic\u00AE Expo control modes. Unlike the kA slot gain, this is always in units of V/rps\u00B2.\nThis represents the amount of voltage necessary to achieve an acceleration. In terms of the Motion Magic\u00AE Expo profile, a higher kA results in a slower acceleration.","Ordinal":-1,"Type":"double","Description":null,"Units":"V/rps\u00B2","MinValue":1E-05,"MaxValue":100,"SignalId":2202,"SignalName":"Config_MotionMagicExpo_kA","DefaultValue":0.1,"Value":0.10000000149011612,"EnumValues":[]}]},{"Name":"Audio","Summary":"Configs that affect audible components of the device.","Description":"Includes configuration for the beep on boot.","Ordinal":-1,"Configs":[{"Name":"Allow Music Dur Disable","Summary":"If true, the TalonFX will allow Orchestra and MusicTone requests during disabled state.  This can be used to address corner cases when music features are needed when disabled.  This setting defaults to false.  Note that if the rotor is moving, music features are always disabled regardless of this setting.","Ordinal":0,"Type":"Boolean","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2302,"SignalName":"Config_AllowMusicDurDisable","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Beep On Boot","Summary":"If true, the TalonFX will beep during boot-up.  This is useful for general debugging, and defaults to true.  If rotor is moving during boot-up, the beep will not occur regardless of this setting.","Ordinal":0,"Type":"Boolean","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2157,"SignalName":"Config_BeepOnBoot","DefaultValue":1,"Value":1,"EnumValues":[]},{"Name":"Beep On Config","Summary":"If true, the TalonFX will beep during configuration API calls if device is disabled.  This is useful for general debugging, and defaults to true.  Note that if the rotor is moving, the beep will not occur regardless of this setting.","Ordinal":0,"Type":"Boolean","Description":null,"Units":"","MinValue":-1.7976931348623157E+308,"MaxValue":1.7976931348623157E+308,"SignalId":2301,"SignalName":"Config_BeepOnConfig","DefaultValue":1,"Value":1,"EnumValues":[]}]},{"Name":"Torque Current","Summary":"Configs that affect Torque Current control types.","Description":"Includes the maximum and minimum applied torque output and the neutral deadband used during TorqueCurrentFOC requests.","Ordinal":11,"Configs":[{"Name":"Peak Forward Torque Current","Summary":"Maximum (forward) output during torque current based control modes.","Ordinal":0,"Type":"double","Description":null,"Units":"A","MinValue":-800,"MaxValue":800,"SignalId":2168,"SignalName":"Config_PeakForTorqCurr","DefaultValue":800,"Value":800,"EnumValues":[]},{"Name":"Peak Reverse Torque Current","Summary":"Minimum (reverse) output during torque current based control modes.","Ordinal":0,"Type":"double","Description":null,"Units":"A","MinValue":-800,"MaxValue":800,"SignalId":2169,"SignalName":"Config_PeakRevTorqCurr","DefaultValue":-800,"Value":-800,"EnumValues":[]},{"Name":"Torque Neutral Deadband","Summary":"Configures the output deadband during torque current based control modes.","Ordinal":0,"Type":"double","Description":null,"Units":"A","MinValue":0,"MaxValue":25,"SignalId":2170,"SignalName":"Config_TorqueNeutralDB","DefaultValue":0,"Value":0,"EnumValues":[]}]},{"Name":"Custom Params","Summary":"Custom Params.","Description":"Custom paramaters that have no real impact on controller.","Ordinal":100,"Configs":[{"Name":"Custom Param0","Summary":"Custom parameter 0.  This is provided to allow end-applications to store persistent information in the device.","Ordinal":0,"Type":"Integer","Description":null,"Units":"","MinValue":-32768,"MaxValue":32767,"SignalId":822,"SignalName":"CustomParam0","DefaultValue":0,"Value":0,"EnumValues":[]},{"Name":"Custom Param1","Summary":"Custom parameter 1.  This is provided to allow end-applications to store persistent information in the device.","Ordinal":0,"Type":"Integer","Description":null,"Units":"","MinValue":-32768,"MaxValue":32767,"SignalId":823,"SignalName":"CustomParam1","DefaultValue":0,"Value":0,"EnumValues":[]}]}],"JsonVersion":2}